{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BASE_URL","RandomQuote","_useState","useState","author","quote","twitter","_useState2","Object","slicedToArray","tweet","setTweet","fetchQuote","fetch","then","res","json","parsedJSON","results","quotes","Math","floor","random","length","useEffect","tweetThis","react_default","a","createElement","id","class","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAGMA,SAAW,0IAiDFC,MA/Cf,WAAsB,IAAAC,EACQC,mBAAS,CACnCC,OAAQ,GACRC,MAAO,GACPC,QAAS,KAJSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACZQ,EADYH,EAAA,GACLI,EADKJ,EAAA,GAOdK,EAAa,WACjBC,MAAMb,GACLc,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACjBF,KAAM,SAAAG,GACL,IAAIC,EAAUD,EAAWE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAWE,OAAOI,SAC7EZ,EAAS,CACPP,OAAQc,EAAQd,OAChBC,MAAOa,EAAQb,MACfC,QAAS,6DAKfkB,oBAAU,WAAQZ,KAAgB,IApBd,IAsBZP,EAA2BK,EAA3BL,MAAOD,EAAoBM,EAApBN,OACTqB,EAD6Bf,EAAZJ,QACK,IAAMD,EAAQ,KAAOD,EAEjD,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QAASxB,GACfqB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAWzB,GACnBsB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,UACEE,MAAM,WACND,GAAG,YACHE,QAASnB,GAHX,aAIAc,EAAAC,EAAAC,cAAA,UAAQE,MAAM,eACZJ,EAAAC,EAAAC,cAAA,KACEC,GAAG,cACHG,KAAOP,GAFT,mBC7BUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.c361cebf.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport './App.scss';\n\nconst BASE_URL = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\nfunction RandomQuote(){\n  const [ tweet, setTweet ] = useState({\n    author: '',\n    quote: '',\n    twitter: ''\n  })\n  \n  const fetchQuote = () => {\n    fetch(BASE_URL)\n    .then( res => res.json())\n    .then( parsedJSON => {\n      let results = parsedJSON.quotes[Math.floor(Math.random() * parsedJSON.quotes.length)]\n      setTweet({\n        author: results.author,\n        quote: results.quote,\n        twitter: 'http://twitter.com/intent/tweet?hashtags=quotes&text='\n      })\n    })\n  }\n  \n  useEffect(() => { fetchQuote() }, [])\n  \n  const { quote, author, twitter } = tweet\n  const tweetThis = twitter + '\"' + quote + '\" ' + author\n  \n  return(\n    <div id='quote-box'>\n      <h1>Random Quote Machine</h1>\n      <p id=\"text\">{ quote }</p>\n      <div id=\"author\">{ author }</div>\n      <div id=\"buttons\">\n        <button\n          class=\"btn-info\" \n          id=\"new-quote\"\n          onClick={fetchQuote}>New entry</button>\n        <button class=\"btn-default\">\n          <a \n            id=\"tweet-quote\" \n            href={ tweetThis }>\n            Tweet this!\n          </a>\n        </button>\n      </div>\n    </div>\n    )\n}\n\nexport default RandomQuote;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}